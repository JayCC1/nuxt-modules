import {
  defineNuxtModule,
  createResolver,
  addTemplate,
  addPlugin,
  addImportsDir,
  addTypeTemplate,
} from '@nuxt/kit'

import { defaults } from './config'

import type { Options } from './types'

export default defineNuxtModule<Options>({
  meta: {
    name: '@spruce-hub/nuxt-route',
    configKey: 'nuxtRoute',
    compatibility: {
      nuxt: '^3.2.0',
    },
  },
  defaults,
  setup(_options, nuxt) {
    const { resolve } = createResolver(import.meta.url)
    /** add route options template
     * -------------------------- */
    _options.cookieName = _options.cookieName || 'access_token'
    nuxt.options.alias['#nuxtRoute'] =
      addTemplate({
        filename: 'spruce-module-route.mjs',
        write: true,
        getContents: () => `export default ${JSON.stringify(_options, null, 2)}`,
      }).dst || ''

    /** add route middleware
     * -------------------------- */
    addPlugin(resolve('./runtime/plugins/authentication'))

    /** add composables
     * -------------------------- */
    addImportsDir(resolve('runtime/composables'))

    addTypeTemplate({
      filename: 'types/route-module.d.ts',
      getContents: () => `// Generated by @spruce-hub/nuxt-route
import type { CookieOptions } from '#app'
declare module '#app' {
  interface NuxtApp {
    /**
     * @deprecated 请使用 useLoginSuccess 代替
     * @Describe 登录成功后调用
     * @param {string} token 将要写入 cookie 的值， name 为 nuxtRoute.cookieName
     * @param {CookieOptions | string} options 当为 object 类型时，作为 useCookie 的 options；当为 string 类型时，作为重定向路由地址
     * @param {string} to 重定向路由地址，该项具有最高优先级
     */
    $loginSuccess(token: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, to: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options: CookieOptions, to?: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options?: CookieOptions | string, to?: string): void

    /**
     * @deprecated 请使用 useToLogin 代替
     * @Describe 记录一个路由地址并跳转到登录页
     * @param {string} fullPath 记录的路由地址
     * @param {string} open 新窗口(标签页)打开登录页面
     */
    $toLogin(fullPath: string, open?: '_blank'): void
  }
}
declare module 'vue' {
  interface ComponentCustomProperties {
    /**
     * @deprecated 请使用 useLoginSuccess 代替
     * @Describe 登录成功后调用
     * @param {string} token 将要写入 cookie 的值， name 为 nuxtRoute.cookieName
     * @param {CookieOptions | string} options 当为 object 类型时，作为 useCookie 的 options；当为 string 类型时，作为重定向路由地址
     * @param {string} to 重定向路由地址，该项具有最高优先级
     */
    $loginSuccess(token: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, to: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options: CookieOptions, to?: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options?: CookieOptions | string, to?: string): void

    /**
     * @deprecated 请使用 useToLogin 代替
     * @Describe 记录一个路由地址并跳转到登录页
     * @param {string} fullPath 记录的路由地址
     * @param {string} open 新窗口(标签页)打开登录页面
     */
    $toLogin(fullPath: string, open?: '_blank'): void
  }
}
declare module "@vue/runtime-core" {
  interface ComponentCustomProperties {
    /**
     * @deprecated 请使用 useLoginSuccess 代替
     * @Describe 登录成功后调用
     * @param {string} token 将要写入 cookie 的值， name 为 nuxtRoute.cookieName
     * @param {CookieOptions | string} options 当为 object 类型时，作为 useCookie 的 options；当为 string 类型时，作为重定向路由地址
     * @param {string} to 重定向路由地址，该项具有最高优先级
     */
    $loginSuccess(token: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, to: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options: CookieOptions, to?: string): void
    /** @deprecated 请使用 useLoginSuccess 代替 */
    $loginSuccess(token: string, options?: CookieOptions | string, to?: string): void

    /**
     * @deprecated 请使用 useToLogin 代替
     * @Describe 记录一个路由地址并跳转到登录页
     * @param {string} fullPath 记录的路由地址
     * @param {string} open 新窗口(标签页)打开登录页面
     */
    $toLogin(fullPath: string, open?: '_blank'): void
  }
}
export {}`,
    })
  },
})
